import Head from 'next/head';
import { useMutation } from '@apollo/client';
import { CreateCocktailMutation } from '../graphql/mutations';
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/router';
import { useForm } from 'react-hook-form';
import { EditCocktailMutation } from '@/graphql/mutations';

type FormData = {
  title: string;
  content: string;
  recipe: string;
  history: string;
  imageUrl: string;
  rating: number;
};

type Cocktail = {
  id: string;
  title: string;
  content: string;
  recipe: string;
  history: string;
  imageUrl: string;
  rating: number;
};

type Props = {
  cocktail?: Cocktail;
};

const Form = ({ cocktail }: Props) => {
  const router = useRouter();
  const { data: session } = useSession();
  const {
    register,
    handleSubmit,
    formState: { errors, isValid }
  } = useForm<FormData>({
    defaultValues: cocktail
      ? {
          title: cocktail.title,
          content: cocktail.content,
          recipe: cocktail.recipe,
          history: cocktail.history,
          imageUrl: cocktail.imageUrl,
          rating: cocktail.rating
        }
      : {},
    mode: 'onChange'
  });

  const [createCocktail, { loading, error }] = useMutation(CreateCocktailMutation);
  const [editCocktail] = useMutation(EditCocktailMutation);

  if (loading) {
    return <div>Loading ...</div>;
  }
  if (error) {
    return <div>Error: {error.message}</div>;
  }

  const handleCreate = async (data: FormData) => {
    const { data: cocktailData } = await createCocktail({
      variables: {
        title: data.title,
        content: data.content,
        recipe: data.recipe,
        history: data.history,
        imageUrl: data.imageUrl,
        rating: Number(data.rating),
        authorEmail: session?.user?.email
      }
    });
    if (cocktailData?.createCocktail) {
      router.push('/');
    }
  };

  const handleEdit = async (currentCocktail: Cocktail, data: FormData) => {
    const { data: cocktailData } = await editCocktail({
      variables: {
        cocktailId: currentCocktail.id,
        title: data.title,
        content: data.content,
        recipe: data.recipe,
        history: data.history,
        imageUrl: data.imageUrl,
        rating: Number(data.rating),
        authorEmail: session?.user?.email
      }
    });
    if (cocktailData?.editCocktail) {
      router.push('/');
    }
  };

  const onSubmit = (data: FormData) => {
    if (!!cocktail) {
      handleEdit(cocktail, data);
    } else {
      handleCreate(data);
    }
  };

  return (
    <>
      <Head>
        <title>{cocktail ? 'Edit Cocktail' : 'Create Cocktail'}</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/cocktail.png' />
      </Head>
      <h1 className='text-center text-3xl font-light text-darkgray my-4 uppercase'>
        {cocktail ? 'Edit the Cocktail' : 'Create the Cocktail'}
      </h1>
      <form className='mx-auto max-w-xl py-4' onSubmit={handleSubmit(onSubmit)}>
        <div className='mb-4'>
          <label className='block text-darkgray text-sm font-bold mb-2' htmlFor='title'>
            Cocktail Title
          </label>
          <input
            className='shadow appearance-none border border-golden rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline'
            id='title'
            type='text'
            placeholder='Title'
            {...register('title', { required: 'Write a Comment' })}
          />
          {errors.title && errors.title.type === 'required' && <span>This is required</span>}
        </div>
        <div className='mb-6'>
          <label className='block text-darkgray text-sm font-bold mb-2' htmlFor='content'>
            Cocktail Content
          </label>
          <textarea
            className='shadow appearance-none border border-golden rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline'
            id='content'
            placeholder='Content of the cocktail'
            {...register('content', { required: 'Write a Comment' })}
          />
          {errors.content && errors.content.type === 'required' && <span>This is required</span>}
        </div>
        <div className='mb-6'>
          <label className='block text-darkgray text-sm font-bold mb-2' htmlFor='recipe'>
            Cocktail Recipe
          </label>
          <textarea
            className='shadow appearance-none border border-golden rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline'
            id='recipe'
            placeholder='Recipe of the cocktail'
            {...register('recipe', { required: 'Write a Comment' })}
          />
          {errors.recipe && errors.recipe.type === 'required' && <span>This is required</span>}
        </div>
        <div className='mb-6'>
          <label className='block text-darkgray text-sm font-bold mb-2' htmlFor='history'>
            Cocktail History
          </label>
          <textarea
            className='shadow appearance-none border border-golden rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline'
            id='history'
            placeholder='History of the cocktail'
            {...register('history', { required: 'Write a Comment' })}
          />
          {errors.history && errors.history.type === 'required' && <span>This is required</span>}
        </div>
        <div className='mb-8'>
          <label className='block text-darkgray text-sm font-bold mb-2' htmlFor='image'>
            Cocktail Image
          </label>
          <input
            className='shadow appearance-none border border-golden rounded w-full py-2 px-3 mb-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline'
            id='image'
            type='text'
            placeholder='Cocktail Image Url'
            {...register('imageUrl', { required: 'Write a Comment' })}
          />
          {errors.imageUrl && errors.imageUrl.type === 'required' && <span>This is required</span>}

          <label className='block text-darkgray text-sm font-bold mb-2' htmlFor='rating'>
            Cocktail Rating
          </label>
          <input
            className='shadow appearance-none border border-golden rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline'
            id='rating'
            type='number'
            max={5}
            min={1}
            {...register('rating', { required: 'Write a Comment' })}
            placeholder='Cocktail Rating'
          />
          {errors.rating && errors.rating.type === 'required' && <span>This is required</span>}
        </div>
        <div className='flex items-center justify-start '>
          <button
            className='bg-[#fff] border border-golden hover:bg-golden text-golden hover:text-[#fff] font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline  transition-all'
            type='submit'
            name='submit'
          >
            {cocktail ? 'Edit Cocktail' : 'Create Cocktail'}
          </button>
        </div>
      </form>
    </>
  );
};

export default Form;
